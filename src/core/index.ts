export * from "./generator.ts";
export * from "./defaultgenerators.ts";
import { escapeArbitraryCss } from "../utils/escape.ts";
import { convertJSNameToHTML, escapeCssClassName } from "../utils/index.ts";
import { defaultGenerators } from "./defaultgenerators.ts";

export const generateStyles = (
	classes: string[],
	generators = defaultGenerators,
) => {
	const styles: { [className: string]: string[] } = {};
	const noOutputClasses: string[] = [];

	for (const className of classes) {
		if (className.includes(":")) {
			console.log(
				`Skipping class: ${className} as modifiers are not supported yet`,
			);
			noOutputClasses.push(className);
			continue;
		}

		let addToFailed = true;

		for (const generator of generators) {
			if (
				generator.patterns.some((pattern) =>
					new RegExp(`^${new RegExp(pattern).source}$`).test(
						className,
					)
				)
			) {
				const generated = generator.generator(className);

				if (!generated) {
					noOutputClasses.push(className);
					console.log(
						`No output for class: ${className}, ${generator.patterns}`,
					);
					addToFailed = false;
					break;
				}

				for (
					const generatedClass of Array.isArray(generated)
						? generated
						: [generated]
				) {
					styles[generatedClass.class] ??= [];

					for (
						const [style, value] of Object.entries(
							generatedClass.styles,
						)
					) {
						styles[generatedClass.class].push(
							`${convertJSNameToHTML(style)}: ${value}`,
						);
					}
				}

				addToFailed = false;
				break;
			}
		}

		if (!addToFailed) continue;

		console.log(`No generator found for class: ${className}`);

		noOutputClasses.push(className);
	}

	return {
		styles,
		noOutputClasses,
	};
};

export const generateStylesheet = (
	styles: ReturnType<typeof generateStyles>,
	minified = false,
) => {
	const styleSheetHeader = `/* Generated by WaveCSS (${
		Object.keys(styles.styles).length
	}/${
		Object.keys(styles.styles).length + styles.noOutputClasses.length
	}) */\n`;

	let styleSheet = "";

	for (
		const [className, style] of Object.entries(styles.styles).sort((a, b) =>
			a[0].localeCompare(b[0])
		)
	) {
		styleSheet += `.${escapeCssClassName(className)} {\n\t${
			style.map((s) => escapeArbitraryCss(s)).join(";\n\t")
		};\n}\n`;
	}

	if (minified) {
		styleSheet = styleSheet.replace(/\n/g, "").replace(/\t/g, "");
	}

	return styleSheetHeader + styleSheet;
};
